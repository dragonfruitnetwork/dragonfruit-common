// DragonFruit.Data Copyright DragonFruit Network
// Licensed under the MIT License. Please refer to the LICENSE file at the root of this project for details

using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace DragonFruit.Data.Roslyn
{
    [Generator]
    public class ApiRequestSourceGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var apiRequestDerivedClasses = context.SyntaxProvider.CreateSyntaxProvider(
                predicate: (syntaxNode, _) => syntaxNode is ClassDeclarationSyntax classDecl && classDecl.Modifiers.Any(x => x.IsKind(SyntaxKind.PartialKeyword)),
                transform: (generatorSyntaxContext, _) => GetSemanticTarget(generatorSyntaxContext));

            IncrementalValueProvider<(Compilation, ImmutableArray<ClassDeclarationSyntax>)> targets = context.CompilationProvider.Combine(apiRequestDerivedClasses.Collect());
            context.RegisterSourceOutput(targets, static (spc, source) => Execute(source.Item1, source.Item2, spc));
        }

        private static ClassDeclarationSyntax GetSemanticTarget(GeneratorSyntaxContext context)
        {
            var model = context.SemanticModel;
            var classDeclaration = (ClassDeclarationSyntax)context.Node;

            var classSymbol = ModelExtensions.GetDeclaredSymbol(model, classDeclaration) as INamedTypeSymbol;

            // ensure the class isn't abstract
            if (classSymbol?.IsAbstract != false)
            {
                return null;
            }

            while (classSymbol != null)
            {
                if (classSymbol.ToString() == "DragonFruit.Data.ApiRequest")
                {
                    return classDeclaration;
                }

                classSymbol = classSymbol.BaseType;
            }

            return null;
        }

        private static void Execute(Compilation compilation, ImmutableArray<ClassDeclarationSyntax> requestClasses, SourceProductionContext context)
        {
            if (requestClasses.IsDefaultOrEmpty)
            {
                return;
            }

            foreach (var classDeclaration in requestClasses.Distinct())
            {
                var model = compilation.GetSemanticModel(classDeclaration.SyntaxTree, true);
                var classSymbol = model.GetDeclaredSymbol(classDeclaration)!;

                var sourceBuilder = new StringBuilder("// <auto-generated />");

                // using statements
                sourceBuilder.AppendLine("using System;");
                sourceBuilder.AppendLine("using System.Text;");
                sourceBuilder.AppendLine("using System.Net.Http;");
                sourceBuilder.AppendLine("using DragonFruit.Data;");
                sourceBuilder.AppendLine("using DragonFruit.Data.Requests;");

                sourceBuilder.AppendLine($"namespace {classSymbol.ContainingNamespace.ToDisplayString()} {{");
                sourceBuilder.AppendLine($"partial class {classSymbol.Name} : IRequestBuilder {{");
                sourceBuilder.AppendLine("public HttpRequestMessage BuildRequest() {");

                // create request uri
                sourceBuilder.AppendLine("UriBuilder uriBuilder = new UriBuilder(RequestPath);");
                sourceBuilder.AppendLine("StringBuilder builder = new StringBuilder();");

                var parameters = GetParameters(classSymbol, "DragonFruit.Data.Requests.RequestParameterAttribute")
                                 .Select(x =>
                                 {
                                     var attributeArgs = x.GetAttributes().Single(y => y.AttributeClass?.ToString() == "DragonFruit.Data.Requests.RequestParameterAttribute").ConstructorArguments;

                                     return new
                                     {
                                         Symbol = x,
                                         Accessor = x is IPropertySymbol propertySymbol ? $"this.{propertySymbol.Name}" : $"this.{x.Name}()",
                                         ParameterType = (ParameterType)attributeArgs[0].Value!,
                                         PropertyName = attributeArgs[1].Value
                                     };
                                 })
                                 .ToLookup(x => x.ParameterType);

                // insert queries
                foreach (var query in parameters[ParameterType.Query])
                {
                    // check if the value is null
                    sourceBuilder.AppendLine($"if ({query.Accessor} != null)");
                    sourceBuilder.AppendLine("{");

                    // append value to query string todo if enum or collection, use special converters
                    sourceBuilder.AppendLine($"builder.Append(\"{query.PropertyName}=\");");
                    sourceBuilder.AppendLine($"builder.Append(Uri.EscapeDataString({query.Accessor}.ToString()));");
                    sourceBuilder.AppendLine("builder.Append(\"&\");");

                    // close null check
                    sourceBuilder.AppendLine("}");
                }

                // trim off excess ampersand (if one)
                sourceBuilder.AppendLine("if (builder.Length > 0)");
                sourceBuilder.AppendLine("{");
                sourceBuilder.AppendLine("builder.Length--;");
                sourceBuilder.AppendLine("}");

                // set query string as part of uri, create HTTP request message
                sourceBuilder.AppendLine("uriBuilder.Query = builder.ToString();");
                sourceBuilder.AppendLine("HttpRequestMessage request = new HttpRequestMessage(RequestMethod, uriBuilder.Uri);");

                // todo add headers, add form body content

                // add request body - if it is derived from HttpContent then set it directly, otherwise pass to serializer
                var requestBody = GetParameters(classSymbol, "DragonFruit.Data.Attributes.RequestBodyAttribute").FirstOrDefault();

                if (requestBody != null)
                {
                    var bodyAccessor = requestBody is IPropertySymbol propertySymbol ? $"this.{propertySymbol.Name}" : $"this.{requestBody.Name}()";
                    sourceBuilder.AppendLine($"request.Content = {bodyAccessor} as HttpContent"); // todo add fallback to serializer
                }

                // return request, close method, partial class, namespace
                sourceBuilder.AppendLine("return request;\n}}}");
                context.AddSource($"{classSymbol.Name}.g.cs", SourceText.From(sourceBuilder.ToString(), Encoding.UTF8));
            }
        }

        private static IEnumerable<ISymbol> GetParameters(INamespaceOrTypeSymbol symbol, string typeName)
        {
            // check if member is a method with no parameters or a property then check if it has the [RequestBody] attribute
            var candidates = symbol.GetMembers()
                                   .Where(x => x is IPropertySymbol or IMethodSymbol { Parameters.Length: 0 })
                                   .Where(x => x.GetAttributes().Any(y => y.AttributeClass?.ToString() == typeName));

            return candidates;
        }

        /// <summary>
        /// Clone of "DragonFruit.Data.Requests.ParameterType" to avoid a dependency on the main library
        /// </summary>
        private enum ParameterType
        {
            Query = 1,
            Form = 2,
            Header = 3
        }
    }
}
